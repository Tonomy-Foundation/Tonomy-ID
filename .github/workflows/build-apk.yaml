name: Build Android APK

# Use https://github.com/nektos/act to run this locally
# INSTALL:
#   curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash
# PREPARE: you need to have a `testnet` project in EAS:
#   export EXPO_NODE_ENV=testnet
#   export EXPO_FIRST_TIME=true
#   yarn run build:android
#   echo "Set the value of `expoProjectId` in src/config/config.testnet.json"
# RUN:
#   act -j build-android -s EXPO_TOKEN="${EXPO_TOKEN}"

on:
  push

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      EXPO_NODE_ENV: testnet
      EXPO_PLATFORM: android
      NODE_VERSION: 22.3.0
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      # https://expo.dev/accounts/[account]/settings/access-tokens
    container:
      image: cimg/android:2024.01-ndk
      # See https://circleci.com/developer/images/image/cimg/android#image-tags

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install nodejs
        run: |
          wget "nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}-linux-x64.tar.gz"
          sudo tar -C /usr/local --strip-components 1 -xzf "node-v${NODE_VERSION}-linux-x64.tar.gz"
          sudo corepack enable
          node -v && npm -v && yarn -v

      - name: Clean up apt cache
        run: |
          echo "Apt cache size before cleanup:"
          sudo du -sh /var/cache/apt
          sudo apt-get clean
          echo "Apt cache size after cleanup:"
          sudo du -sh /var/cache/apt

      - name: Clean up Docker images
        run: |
          echo "Docker images size before cleanup:"
          sudo docker system df
          sudo docker system prune -af
          echo "Docker images size after cleanup:"
          sudo docker system df
      
      - name: Clean up npm cache
        run: |
          echo "NPM cache size before cleanup:"
          sudo du -sh ~/.npm
          npm cache clean --force
          echo "NPM cache size after cleanup:"
          sudo du -sh ~/.npm
      
      - name: Clean up yarn cache
        run: |
          echo "Yarn cache size before cleanup:"
          sudo du -sh ~/.yarn
          yarn cache clean
          echo "Yarn cache size after cleanup:"
          sudo du -sh ~/.yarn
        
      - name: Cleanup unused directories
        run: |
          to_delete=(
            /usr/share/dotnet
            /usr/local/lib/android
            /usr/local/share/android
            /usr/local/share/gradle
            /usr/local/share/maven
            /usr/local/share/dotnet
            /usr/local/share/swift
            ~/.gradle/caches/
            /tmp
          )
          for dir in "${to_delete[@]}"; do
            if [ -d "$dir" ]; then
              echo "Deleting directory $dir"
              sudo du -sh "$dir"
              # sudo rm -rf "$dir"
            fi
            if [ -f "$dir" ]; then
              echo "Deleting file $dir"
              sudo du -sh "$dir"
              # sudo rm -f "$dir"
            fi
          done
          sudo mkdir -p /tmp

      - name: ðŸš€ Build Android .apk app
        run: |
          node -v && yarn -v
          yarn --immutable
          sudo du -sh ~/.yarn
          yarn cache clean
          sudo du -sh ~/.yarn
          yarn run build:prepare
          npx eas build --clear-cache --profile testnet-internal --platform "${EXPO_PLATFORM}" --local

      - name: Find APK file and rename it so it can be added as an artifact
        run: find . -name "*.apk" -exec mv {} TonomyID.apk \;

      - name: Archive Android APK as artifact
        uses: actions/upload-artifact@v3
        with:
          name: TonomyID-Android
          path: ./TonomyID.apk
