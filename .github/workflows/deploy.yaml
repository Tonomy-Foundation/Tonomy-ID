name: Deployment

on:
  push:
    branches:
      - master
      - testnet
      - development

jobs:
  deploy:
    runs-on: ubuntu-24.04

    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}  
      # https://expo.dev/accounts/[account]/settings/access-tokens
      GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      # https://github.com/expo/fyi/blob/main/creating-google-service-account.md
      APPLE_STORE_CONNECT_API_KEY: ${{ secrets.APPLE_STORE_CONNECT_API_KEY }}
      # https://github.com/expo/fyi/blob/main/creating-asc-api-key.md
      GITHUB_TOKEN: ${{ secrets.MY_GITHUB_PERSONAL_ACCESS_TOKEN }}
      # https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic
      INFURA_KEY: ${{ secrets.INFURA_KEY }}
      ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
      SENTRY_PUBLIC_KEY: ${{ secrets.SENTRY_PUBLIC_KEY }}
      SENTRY_SECRET_KEY: ${{ secrets.SENTRY_SECRET_KEY }}
      SENTRY_PROJECT_ID: ${{ secrets.SENTRY_PROJECT_ID }}
      WALLETCONNECT_PROJECT_ID: ${{ secrets.WALLETCONNECT_PROJECT_ID }}
      HCAPTCHA_SITE_KEY: ${{ secrets.HCAPTCHA_SITE_KEY }}
      VERIFF_API_KEY: ${{ secrets.VERIFF_API_KEY }}

    steps:
      - name: üèó Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MY_GITHUB_PERSONAL_ACCESS_TOKEN }}

      - name: Enable Corepack before setting up Node
        run: corepack enable

      - name: üöÄ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.3.0

      - name: Install EAS CLI
        run: npm install -g eas-cli@16.3.3

      - run: node -v && npm -v && yarn -v && eas -v

      - name: Create service account files
        run: |
          echo "${GOOGLE_SERVICE_ACCOUNT_KEY}" > ./google-service-key.json
          echo "${APPLE_STORE_CONNECT_API_KEY}" > ./apple-asc-api-key.p8

      - name: Install dependencies
        run: yarn --immutable || yarn install

      - name: Release build
        run: yarn release

      # üü© Add this here: BEFORE the "Deploy based on branch" step
      - name: üîê Sync EAS Secrets with GitHub Secrets
        run: |
          eas secret:create --name INFURA_KEY --value "$INFURA_KEY" --scope project --non-interactive || true
          eas secret:create --name ETHERSCAN_API_KEY --value "$ETHERSCAN_API_KEY" --scope project --non-interactive || true
          eas secret:create --name SENTRY_PUBLIC_KEY --value "$SENTRY_PUBLIC_KEY" --scope project --non-interactive || true
          eas secret:create --name SENTRY_SECRET_KEY --value "$SENTRY_SECRET_KEY" --scope project --non-interactive || true
          eas secret:create --name SENTRY_PROJECT_ID --value "$SENTRY_PROJECT_ID" --scope project --non-interactive || true
          eas secret:create --name WALLETCONNECT_PROJECT_ID --value "$WALLETCONNECT_PROJECT_ID" --scope project --non-interactive || true
          eas secret:create --name HCAPTCHA_SITE_KEY --value "$HCAPTCHA_SITE_KEY" --scope project --non-interactive || true
          eas secret:create --name VERIFF_API_KEY --value "$VERIFF_API_KEY" --scope project --non-interactive || true
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Deploy based on branch
        run: |
          echo "Current branch: ${{ github.ref_name }}"

          if [[ ${GITHUB_REF#refs/*/} == "master" ]]; then
            echo "Branch is 'master'"
            yarn run deploy:production
          elif [[ ${GITHUB_REF#refs/*/} == "testnet" ]]; then
            echo "Branch is 'testnet'"
            yarn run deploy:testnet
          elif [[ ${GITHUB_REF#refs/*/} == "development" ]]; then
            echo "Branch is 'development'"
            yarn run deploy:staging
          fi
